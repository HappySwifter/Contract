//
//  TemplatesInteractor.swift
//  SmartContrakt
//
//  Created by Артем Валиев on 03/12/2018.
//  Copyright (c) 2018 Артем Валиев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TemplatesBusinessLogic
{
  func getTemplates(request: Templates.Something.Request)
}

protocol TemplatesDataStore
{
  //var name: String { get set }
}

class TemplatesInteractor: TemplatesBusinessLogic, TemplatesDataStore
{
    var presenter: TemplatesPresentationLogic?
    var serverWorker = api
    var localWorker = TemplateCoreData()
  
  
    func getTemplates(request: Templates.Something.Request) {

        switch WorkMode.getMode() {
        case .online:
            serverWorker?.getTemplates(action: API.Action.getTemplates, cb: { [weak self] (result) in
            switch result {
            case .Success(let newLocalTemplates):
                self?.present(templates: newLocalTemplates)
            case .Failure(let error):
                switch error {
                case .NoNetwork:
                    self?.presentLocalTemplates()
                default:
                    presentAlert(title: "Ошибка", text: error.localizedDescription)
                }
            }
        })
        case .offline:
            presentLocalTemplates()
        }
    }
    
    
    func presentLocalTemplates() {
        present(templates: localWorker.getTemplates())

    }
    
    func present(templates: [TemplateModel]) {
        let response = Templates.Something.Response(templates: templates)
        presenter?.presentTemplates(response: response)
    }
}
