//
//  TemplatesViewController.swift
//  SmartContrakt
//
//  Created by Артем Валиев on 03/12/2018.
//  Copyright (c) 2018 Артем Валиев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TemplatesDisplayLogic: class
{
  func displaySomething(viewModel: Templates.Something.ViewModel)
}

class TemplatesViewController: UIViewController, TemplatesDisplayLogic
{
  var interactor: TemplatesBusinessLogic?
  var router: (NSObjectProtocol & TemplatesRoutingLogic & TemplatesDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TemplatesInteractor()
    let presenter = TemplatesPresenter()
    let router = TemplatesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    
    
    @IBOutlet weak var tableView: UITableView!
    var selectHandler: ((TemplateModel) -> Void)?
    

    var objects = [TemplateModel]() {
        didSet {
            tableView.reloadData()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Шаблоны"
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 100
        getObjects()
        
    }
    
    func getObjects() {
        api.getTemplates(action: API.Action.getTemplates) { [weak self] (result) in
            switch result {
            case .Success(let objs):
                self?.objects = objs
            case .Failure(let error):
                print(error.localizedDescription)
            }
        }
    }
  

  func displaySomething(viewModel: Templates.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}


extension TemplatesViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return objects.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
        let obj = objects[indexPath.row]
        cell.textLabel?.text = obj.name
        cell.textLabel?.numberOfLines = 0
        cell.detailTextLabel?.text = obj.requisits
        cell.detailTextLabel?.numberOfLines = 0
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let obj = objects[indexPath.row]
        selectHandler?(obj)
    }
}
